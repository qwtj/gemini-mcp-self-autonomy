# tools/gemini_code_generator.py
import os
import google.generativeai as genai

def get_meta():
    return {
        'name': 'gemini_code_generator',
        'description': 'A tool that uses the Gemini API to generate code based on a provided prompt.',
        'input_schema': {
            'type': 'object',
            'properties': {
                'prompt': {
                    'type': 'string',
                    'description': 'The prompt or description for the code to be generated.'
                }
            },
            'required': ['prompt']
        }
    }

def run(tool_input):
    api_key = os.getenv('GOOGLE_API_KEY')
    if not api_key:
        return {'status': 'error', 'message': 'GOOGLE_API_KEY environment variable not set.'}

    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-2.0-flash') # Using gemini-pro for general code generation

        user_prompt = tool_input.get('prompt') or ''
        prompt = (
            "Never use markdown code fencing of any kind (```, ~~~, etc). "
            "Never wrap code in triple quotes ('''). "
            "Strictly follow these directions.\n---\n"
            f"{user_prompt}"
        )

 
        if not prompt:
            return {'status': 'error', 'message': 'Prompt is required for code generation.'}

        response = model.generate_content(prompt)
        
        # Extracting text content from the response parts
        if response and response.parts:
            generated_code = ""
            for part in response.parts:
                if hasattr(part, 'text'):
                    generated_code += part.text
            
            if generated_code:
                return {'status': 'success', 'generated_code': generated_code.strip()}
            else:
                return {'status': 'error', 'message': 'No code generated by Gemini API.'}
        else:
            return {'status': 'error', 'message': f'Gemini API response was empty or malformed: {response}'}

    except Exception as e:
        return {'status': 'error', 'message': f'Error calling Gemini API: {str(e)}'}
